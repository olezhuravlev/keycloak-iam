global # Process-level directives. Optional section.
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #

    # Global system log server.
    # log <address> <facility>
    # facility - one of standard logging types: "kern", "user", "mail", "daemon", "auth", "syslog", "lpr", "news", "uucp", "cron", "auth2",
    #            "ftp", "ntp", "audit", "alert", "cron2", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "local7".
    log         127.0.0.1 local2

    #chroot      /var/lib/haproxy # Changes current directory and performs a chroot() there before dropping privileges.
    #pidfile     /var/run/haproxy.pid

    user        haproxy # Changes the process's user, using the UID of user name from /etc/passwd.
    group       haproxy # Changes the process's group, using the GID of group name from /etc/group.

    daemon              # Makes the process fork into background.

    stats socket /var/lib/haproxy/stats # Unix socket to read statistics info from.

    # utilize system-wide crypto-policies
    #ssl-default-bind-ciphers PROFILE=SYSTEM
    #ssl-default-server-ciphers PROFILE=SYSTEM

    maxconn     4000 # The total number of connections allowed, process-wide. Stops the process from accepting too many connections to avoid running out of memory.

defaults # Default parameters. Mandatory section.
  mode http # Mode to analyze Layer 7 traffic.
  log global # Log traffic info.

  option httplog # Adds HTTP-requests, session state and timers to the log.
  option dontlognull # Don't log empty connections.
  option http-server-close # Server-facing connection is closed after the end of the response is received, but the client-facing connection remains open.
  option httpclose # Close passive connections (the connection is closed after the end of the response and "Connection: close" appended in both directions).
  option redispatch # Redistribute requests amongst backend servers after a connection break.

  timeout http-keep-alive 10s # Maximum allowed time to wait for a new HTTP request withing the same connection. If not set then "timeout http-request" value is used.

  timeout http-request    10s # Time for a client to complete their HTTP-request.
  timeout queue           1m # Time to keep client in the queue before sending "503 Service Unavailable" response to them.

  timeout connect         10s # Time the client has to connect to a server. Allows the client to try to connect again if initial attempts fails.
  retries 3                  # Amount of attempts to check backend state after connection fails (default - 3).

  timeout check           10s # To make healthcheck the server has "timeout connect" to accept the connection and then "timeout check" to give the response.

  timeout client          10s # Time a client can be inactive when connected to the server.
  timeout server          10s # Time for a server to send a response before sending "504 Gateway Timeout" response to the client.

frontend stats  # Interface for clients.
  bind *:70 # IP and port to listen for requests.
  stats enable # Enable frontend statistics.
  stats uri / # URL to access statistics.
  stats refresh 1s # Statistics page update interval.

frontend mykeycloak # Interface for clients.
  # Incoming https-requests. BY SOME REASON THE CERTIFICATE DOESN'T AFFECT ON ANYTHING?!!!
  bind *:443 ssl crt /etc/haproxy/haproxy.crt.pem

  # Reroutes HTTP traffic by sending back an HTTP redirect response to the client and then the client makes a new request to the new resource.
  # When performing a redirection, the load balancer responds directly to the client. It does not forward any traffic to the server.
  http-request redirect scheme https unless { ssl_fc } # Redirect http to https (if it is not https already).

  default_backend keycloak # Backend to send requests to.

backend keycloak # Server to connect for proxy.
  stats enable # Enable frontend statistics.
  stats uri /haproxy?status # URL to access statistics.

  http-check send uri / # URI to send check requests to. A possible list of headers and/or a body to the request sent during HTTP health checks.

  option forwardfor except 127.0.0.0/8 # Enables insertion of the "X-Forwarded-For" header to requests sent to servers.

  # Adds a new Keycloak-related HTTP-header to a request before relaying it to a backend server.
  # http-request add-header Forwarded <info>            # Standard header containing all the information about the client making a request.
  # http-request add-header X-Forwarded-For <address>   # Non-standard header indicating the address of the client where the request originated from.
  http-request add-header X-Forwarded-Proto https       # Non-standard header indicating the protocol (e.g. HTTPS) that the client is using to communicate with the proxy.
  http-request add-header X-Forwarded-Host mykeycloak   # Non-standard header indicating the original host and port number requested by the client.
  http-request add-header X-Forwarded-Port 443          #

  # Enables cookie-based session persistence.
  # Load balancer places HTTP-cookie "KC_ROUTE" containing the server's unique cookie value ("keycloak1", "keycloak2" or "keycloak3") into client's browser
  # and client attaches the cookie to each of its subsequent requests so that load balancer knows which server to use.
  # "insert" - creates the cookie;
  # "indirect" - removes the cookie on each incoming request before forwarding the message to the server;
  # "nocache" - sets the HTTP-header "Cache-Control:private" that notifies any cache-servers (between HAProxy and the user) not to cache the response.
  cookie KC_ROUTE insert indirect nocache

  # Balance algorithm - an algorithm to select a server when doing load balancing.
  # "roundrobin" - each server used in turns, according to their weights (may be adjusted on-the-fly);
  # "static-rr" - the same as roundrobin but the servers' weights cannot be changed on-the-fly;
  # "leastconn" - send traffic to the server with the fewest number of connections;
  # "first" - the first server with available connection slots receives the connection;
  # "hash" - takes an expression in argument that will be evaluated and hashed for each request. The hash defines which backend server will be used;
  # "source" - the source IP-address will be hashed to define which backend server to use;
  # "uri" - URI (or part of it) will be hashed to define which backend server to use;
  # "url_param" - URL-parameter will be looked up in the query string and its value will be hashed to define which backend server to use;
  # "hdr(<name>)" - HTTP-header will be looked up in the query string and its value will be hashed to define which backend server to use;
  # "random" - a random number will be used as the key for the consistent hashing function to define which backend server to use;
  # "rdp-cookie(<name>)" - the RDP cookie (or "mstshash" if omitted) will be looked up and hashed for each incoming TCP request to define which backend server to use;
  # "log-hash" - a comma-delimited list of converters in argument. These converters are applied in sequence to the input log message, and the result will be cast as a string then hashed according to the configured hash-type;
  # "sticky" - tries to stick to the same server as much as possible.
  balance roundrobin

  # "name" - internal name, assigned to the server;
  # "address:port" - IPv4 or IPv6 server address;
  # "check" - enables health checking, which will remove unhealthy servers, not responding to a TCP connection;
  # "ssl" - enables SSL ciphering on outgoing connections to the server;
  # "verify" (only available when support for OpenSSL was built in):
  #         - 'none' - server certificate is not verified (default);
  #         - 'optional' - server certificate can be provided or not (to redirect to different servers);
  #         - 'required' - server certificate must be provided;
  # "ca-file" - certificate file (corresponds to /opt/keycloak/conf/mykeycloak.keystore in Keycloak);
  # "cookie" - sets the cookie value assigned to the server. This value will be checked in incoming requests, and the first operational server possessing the same value will be selected.
  server kc1 keycloak1:8443 check ssl verify required ca-file /etc/haproxy/mykeycloak.crt cookie keycloak1
  server kc2 keycloak2:8443 check ssl verify required ca-file /etc/haproxy/mykeycloak.crt cookie keycloak2
  server kc3 keycloak3:8443 check ssl verify required ca-file /etc/haproxy/mykeycloak.crt cookie keycloak3
